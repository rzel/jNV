    This is a clone of Notational Velocity written in Java/Groovy.
    Please see http://notational.net for the original App.

    The text below is abridged from the NV website and provided as an overview for users not familiar with the original NV.

    NOTATIONAL VELOCITY is an application that stores and retrieves notes.
    UNIQUE CHARACTERISTICS
    ======================
        - Modeless Operation : Searching for notes is not a separate action; rather, it is the primary interface.
        - [TBD in jNV] Incremental Search : Searching encompasses all notes' content and occurs instantly with each key pressed.
        - [Non-goal in jNV] Transparent Database Encryption : All content is compressed and encrypted (enabled optionally) before it is recorded to disk.
        - Mouseless Interaction : Notational Velocity's window was designed for keyboard input above all else, and thus has no buttons.
        - Data Instead of Documents : There is no manual "saving" in Notational Velocity; all modifications take effect immediately. 

    HOW IT WORKS
    ============
    The UI has 3 areas: The search/title text field, the filtered note list and the content of the selected note.

    The search/title text field is used both for creating notes and searching. i.e., in the process of entering the title for a new note, related notes appear below, letting users file information there if they choose. Likewise, if a search reveals nothing, one need simply press return to create a note with the appropriate title.

    [TBD in jNV] If a note's title starts with the search term(s), that title will be "auto-completed". This selects the note and consequently displays it. Correspondingly, selecting a note places its title in the search area (De-selecting the note restores the search terms).

    To create a new note, just type its title and press return. Edit the note as needed in the bottom pane.

    To view or edit an existing note, type one or more words contained in its body [TBD in jNV] or title. Reveal a note's content by using the up/down arrow keys to select it.

    To make good use of NV, try to maintain one detail/fact/item per note. Notational Velocity's strength, note-filtering, is diminished when only a few notes contain most of the content in the database.        

    Credits
    =======

    1. Source Idea: As mentioned above, the original inspiration for jNV is [Notational Velocity](http://notational.net). The implementation, however, uses only the concepts, not the source itself. Since it is open source, however, I might "pick its brains" when/if jNV matures to use the thousands of notes that NV is known to be used for. 
    2. JSON support: This version uses [Stringtree.org's json Reader and Writer](http://www.stringtree.org/stringtree-json.html) in source form to enable read/write from/to Json. Again, since this is closer to "proof of concept" and way afar from "production ready" code, such a library is apt. If jNV rises to the levels of NV's use, I'll definitely revisit the json support - maybe convert it to an export format similar to how NV allows exporting to text files. At that point, this credit might be moot; but for now this implementation (and its allowance of using the code in source form, not to mention writing self-contained reader and writer code) is a godsend because the alternative would be to make this a two jar distribution or to use something like One-jar or Shade/Assembly. Shudder.
        Many thanks, therefore, to the original authors of Stringtree json.
        
